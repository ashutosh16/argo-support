// Package express provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package express

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/rs/zerolog/log"
	"io"
	"net/http"
	"net/http/httputil"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// N404AnswerInExpressMode defines model for 404AnswerInExpressMode.
type N404AnswerInExpressMode struct {
	Content        string  `json:"content"`
	ConversationId *string `json:"conversation_id,omitempty"`
	Id             string  `json:"id"`
	Metadata       struct {
		LlmMetadata *string `json:"llm_metadata,omitempty"`
		PlainText   *string `json:"plain_text,omitempty"`
	} `json:"metadata"`
	ResultStatusCode *int   `json:"result_status_code,omitempty"`
	Role             string `json:"role"`
	Timestamp        int64  `json:"timestamp"`
}

// N404ExpressModeResponse defines model for 404ExpressModeResponse.
type N404ExpressModeResponse struct {
	Answer                 N404AnswerInExpressMode `json:"answer"`
	ConversationId         *string                 `json:"conversation_id,omitempty"`
	OrchestrationContextId string                  `json:"orchestration_context_id"`
	ResolvedTools          []string                `json:"resolved_tools"`
	ResultStatusCode       int                     `json:"result_status_code"`
	ToolOutputs            []string                `json:"tool_outputs"`
}

// DisplayRendererType defines model for DisplayRendererType.
type DisplayRendererType struct {
	Type    *string `json:"type,omitempty"`
	Version *string `json:"version,omitempty"`
}

// ExpressModeRequestMessage defines model for ExpressModeRequestMessage.
type ExpressModeRequestMessage struct {
	ConversationId *string          `json:"conversation_id,omitempty"`
	LlmParams      LLMParamsMessage `json:"llm_params"`
}

// ExpressModeRequestPrompt defines model for ExpressModeRequestPrompt.
type ExpressModeRequestPrompt struct {
	ConversationId *string         `json:"conversation_id,omitempty"`
	LlmParams      LLMParamsPrompt `json:"llm_params"`
}

// ExpressModeResponse defines model for ExpressModeResponse.
type ExpressModeResponse struct {
	Answer                 SuccessAnswerInExpressMode `json:"answer"`
	ConversationId         *string                    `json:"conversation_id,omitempty"`
	OrchestrationContextId string                     `json:"orchestration_context_id"`
	ResolvedTools          []string                   `json:"resolved_tools"`
	ResultStatusCode       int                        `json:"result_status_code"`
	ToolOutputs            []string                   `json:"tool_outputs"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// LLMConfiguration defines model for LLMConfiguration.
type LLMConfiguration struct {
	Context       *string   `json:"context,omitempty"`
	Examples      *[]string `json:"examples,omitempty"`
	MaxTokens     *int      `json:"max_tokens,omitempty"`
	Model         string    `json:"model"`
	N             *int      `json:"n,omitempty"`
	StopSequences *[]string `json:"stop_sequences,omitempty"`
	Temperature   *float64  `json:"temperature,omitempty"`
	TopK          *float64  `json:"top_k,omitempty"`
	TopP          *float64  `json:"top_p,omitempty"`
	Version       *string   `json:"version,omitempty"`
}

// LLMParamsMessage defines model for LLMParamsMessage.
type LLMParamsMessage struct {
	LlmConfiguration LLMConfiguration `json:"llm_configuration"`
	Messages         []Message        `json:"messages"`
}

// LLMParamsPrompt defines model for LLMParamsPrompt.
type LLMParamsPrompt struct {
	LlmConfiguration LLMConfiguration `json:"llm_configuration"`
	Prompt           string           `json:"prompt"`
}

// Message defines model for Message.
type Message struct {
	Content *string `json:"content,omitempty"`
	Role    *string `json:"role,omitempty"`
}

// ResponseDelivery defines model for ResponseDelivery.
type ResponseDelivery struct {
	Url string `json:"url"`
}

// SuccessAnswerInExpressMode defines model for SuccessAnswerInExpressMode.
type SuccessAnswerInExpressMode struct {
	Content        string  `json:"content"`
	ConversationId *string `json:"conversation_id,omitempty"`
	Id             string  `json:"id"`
	Metadata       struct {
		LlmMetadata *string `json:"llm_metadata,omitempty"`
		PlainText   *string `json:"plain_text,omitempty"`
	} `json:"metadata"`
	ResultStatusCode *int   `json:"result_status_code,omitempty"`
	Role             string `json:"role"`
	Timestamp        int64  `json:"timestamp"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// ChatCompletionParams defines parameters for ChatCompletion.
type ChatCompletionParams struct {
	// ExperienceId experience_id
	ExperienceId *string `form:"experience_id,omitempty" json:"experience_id,omitempty"`
}

// CodeGenerationParams defines parameters for CodeGeneration.
type CodeGenerationParams struct {
	// ExperienceId experience_id
	ExperienceId *string `form:"experience_id,omitempty" json:"experience_id,omitempty"`
}

// TextGenerationParams defines parameters for TextGeneration.
type TextGenerationParams struct {
	// ExperienceId experience_id
	ExperienceId *string `form:"experience_id,omitempty" json:"experience_id,omitempty"`
}

// ChatCompletionJSONRequestBody defines body for ChatCompletion for application/json ContentType.
type ChatCompletionJSONRequestBody = ExpressModeRequestMessage

// CodeGenerationJSONRequestBody defines body for CodeGeneration for application/json ContentType.
type CodeGenerationJSONRequestBody = ExpressModeRequestPrompt

// TextGenerationJSONRequestBody defines body for TextGeneration for application/json ContentType.
type TextGenerationJSONRequestBody = ExpressModeRequestPrompt

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ChatCompletionWithBody request with any body
	ChatCompletionWithBody(ctx context.Context, params *ChatCompletionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChatCompletion(ctx context.Context, params *ChatCompletionParams, body ChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CodeGenerationWithBody request with any body
	CodeGenerationWithBody(ctx context.Context, params *CodeGenerationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CodeGeneration(ctx context.Context, params *CodeGenerationParams, body CodeGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TextGenerationWithBody request with any body
	TextGenerationWithBody(ctx context.Context, params *TextGenerationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TextGeneration(ctx context.Context, params *TextGenerationParams, body TextGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ChatCompletionWithBody(ctx context.Context, params *ChatCompletionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatCompletionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatCompletion(ctx context.Context, params *ChatCompletionParams, body ChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatCompletionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	if req != nil {
		reqDump, _ := httputil.DumpRequest(req, true)
		log.Info().Msgf("Request: %s", string(reqDump))
	} else {
		log.Info().Msgf("Request is nil")
	}

	resp, err := c.Client.Do(req)

	if resp != nil {
		respDump, _ := httputil.DumpResponse(resp, true)
		log.Info().Msgf("Response: %s", string(respDump))
	} else {
		log.Info().Msgf("Response is nil")
	}

	return resp, err
}

func (c *Client) CodeGenerationWithBody(ctx context.Context, params *CodeGenerationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCodeGenerationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CodeGeneration(ctx context.Context, params *CodeGenerationParams, body CodeGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCodeGenerationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextGenerationWithBody(ctx context.Context, params *TextGenerationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextGenerationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextGeneration(ctx context.Context, params *TextGenerationParams, body TextGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextGenerationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewChatCompletionRequest calls the generic ChatCompletion builder with application/json body
func NewChatCompletionRequest(server string, params *ChatCompletionParams, body ChatCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChatCompletionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChatCompletionRequestWithBody generates requests for ChatCompletion with any type of body
func NewChatCompletionRequestWithBody(server string, params *ChatCompletionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat/completion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExperienceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "experience_id", runtime.ParamLocationQuery, *params.ExperienceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCodeGenerationRequest calls the generic CodeGeneration builder with application/json body
func NewCodeGenerationRequest(server string, params *CodeGenerationParams, body CodeGenerationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCodeGenerationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCodeGenerationRequestWithBody generates requests for CodeGeneration with any type of body
func NewCodeGenerationRequestWithBody(server string, params *CodeGenerationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/code/generation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExperienceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "experience_id", runtime.ParamLocationQuery, *params.ExperienceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTextGenerationRequest calls the generic TextGeneration builder with application/json body
func NewTextGenerationRequest(server string, params *TextGenerationParams, body TextGenerationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTextGenerationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewTextGenerationRequestWithBody generates requests for TextGeneration with any type of body
func NewTextGenerationRequestWithBody(server string, params *TextGenerationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/text/generation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExperienceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "experience_id", runtime.ParamLocationQuery, *params.ExperienceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ChatCompletionWithBodyWithResponse request with any body
	ChatCompletionWithBodyWithResponse(ctx context.Context, params *ChatCompletionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatCompletionResponse, error)

	ChatCompletionWithResponse(ctx context.Context, params *ChatCompletionParams, body ChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatCompletionResponse, error)

	// CodeGenerationWithBodyWithResponse request with any body
	CodeGenerationWithBodyWithResponse(ctx context.Context, params *CodeGenerationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CodeGenerationResponse, error)

	CodeGenerationWithResponse(ctx context.Context, params *CodeGenerationParams, body CodeGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*CodeGenerationResponse, error)

	// TextGenerationWithBodyWithResponse request with any body
	TextGenerationWithBodyWithResponse(ctx context.Context, params *TextGenerationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextGenerationResponse, error)

	TextGenerationWithResponse(ctx context.Context, params *TextGenerationParams, body TextGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*TextGenerationResponse, error)
}

type ChatCompletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExpressModeResponse
	JSON404      *N404ExpressModeResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ChatCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CodeGenerationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExpressModeResponse
	JSON404      *N404ExpressModeResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CodeGenerationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CodeGenerationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TextGenerationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExpressModeResponse
	JSON404      *N404ExpressModeResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r TextGenerationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TextGenerationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ChatCompletionWithBodyWithResponse request with arbitrary body returning *ChatCompletionResponse
func (c *ClientWithResponses) ChatCompletionWithBodyWithResponse(ctx context.Context, params *ChatCompletionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatCompletionResponse, error) {
	rsp, err := c.ChatCompletionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatCompletionResponse(rsp)
}

func (c *ClientWithResponses) ChatCompletionWithResponse(ctx context.Context, params *ChatCompletionParams, body ChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatCompletionResponse, error) {
	rsp, err := c.ChatCompletion(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatCompletionResponse(rsp)
}

// CodeGenerationWithBodyWithResponse request with arbitrary body returning *CodeGenerationResponse
func (c *ClientWithResponses) CodeGenerationWithBodyWithResponse(ctx context.Context, params *CodeGenerationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CodeGenerationResponse, error) {
	rsp, err := c.CodeGenerationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCodeGenerationResponse(rsp)
}

func (c *ClientWithResponses) CodeGenerationWithResponse(ctx context.Context, params *CodeGenerationParams, body CodeGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*CodeGenerationResponse, error) {
	rsp, err := c.CodeGeneration(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCodeGenerationResponse(rsp)
}

// TextGenerationWithBodyWithResponse request with arbitrary body returning *TextGenerationResponse
func (c *ClientWithResponses) TextGenerationWithBodyWithResponse(ctx context.Context, params *TextGenerationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextGenerationResponse, error) {
	rsp, err := c.TextGenerationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextGenerationResponse(rsp)
}

func (c *ClientWithResponses) TextGenerationWithResponse(ctx context.Context, params *TextGenerationParams, body TextGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*TextGenerationResponse, error) {
	rsp, err := c.TextGeneration(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextGenerationResponse(rsp)
}

// ParseChatCompletionResponse parses an HTTP response from a ChatCompletionWithResponse call
func ParseChatCompletionResponse(rsp *http.Response) (*ChatCompletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExpressModeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404ExpressModeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCodeGenerationResponse parses an HTTP response from a CodeGenerationWithResponse call
func ParseCodeGenerationResponse(rsp *http.Response) (*CodeGenerationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CodeGenerationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExpressModeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404ExpressModeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTextGenerationResponse parses an HTTP response from a TextGenerationWithResponse call
func ParseTextGenerationResponse(rsp *http.Response) (*TextGenerationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TextGenerationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExpressModeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404ExpressModeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
